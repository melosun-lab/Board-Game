[{"/Users/mac/Desktop/board-game/frontend/src/index.js":"1","/Users/mac/Desktop/board-game/frontend/src/serviceWorker.js":"2","/Users/mac/Desktop/board-game/frontend/src/Root.js":"3","/Users/mac/Desktop/board-game/frontend/src/components/Auth/index.js":"4","/Users/mac/Desktop/board-game/frontend/src/withRoot.js":"5","/Users/mac/Desktop/board-game/frontend/src/pages/Profile.js":"6","/Users/mac/Desktop/board-game/frontend/src/components/Shared/Header.js":"7","/Users/mac/Desktop/board-game/frontend/src/pages/App.js":"8","/Users/mac/Desktop/board-game/frontend/src/components/Auth/Login.js":"9","/Users/mac/Desktop/board-game/frontend/src/components/Auth/Register.js":"10","/Users/mac/Desktop/board-game/frontend/src/components/Auth/Signout.js":"11","/Users/mac/Desktop/board-game/frontend/src/components/Shared/Error.js":"12","/Users/mac/Desktop/board-game/frontend/src/components/Shared/Loading.js":"13","/Users/mac/Desktop/board-game/frontend/src/components/Room/RoomList.js":"14","/Users/mac/Desktop/board-game/frontend/src/components/Room/CreateRoom.js":"15","/Users/mac/Desktop/board-game/frontend/src/components/Room/UpdateRoom.js":"16","/Users/mac/Desktop/board-game/frontend/src/components/Room/JoinRoom.js":"17","/Users/mac/Desktop/board-game/frontend/src/components/Room/DeleteRoom.js":"18","/Users/mac/Desktop/board-game/frontend/src/components/Room/SearchRooms.js":"19"},{"size":1329,"mtime":1609897005909,"results":"20","hashOfConfig":"21"},{"size":4948,"mtime":1608811231124,"results":"22","hashOfConfig":"21"},{"size":1559,"mtime":1611204514715,"results":"23","hashOfConfig":"21"},{"size":340,"mtime":1609897005907,"results":"24","hashOfConfig":"21"},{"size":1163,"mtime":1608811231124,"results":"25","hashOfConfig":"21"},{"size":1477,"mtime":1608811231124,"results":"26","hashOfConfig":"21"},{"size":1743,"mtime":1609897005909,"results":"27","hashOfConfig":"21"},{"size":1376,"mtime":1610078494942,"results":"28","hashOfConfig":"21"},{"size":4055,"mtime":1609897005904,"results":"29","hashOfConfig":"21"},{"size":11130,"mtime":1609897106779,"results":"30","hashOfConfig":"21"},{"size":1025,"mtime":1609897005906,"results":"31","hashOfConfig":"21"},{"size":665,"mtime":1609897005908,"results":"32","hashOfConfig":"21"},{"size":443,"mtime":1608811231123,"results":"33","hashOfConfig":"21"},{"size":2590,"mtime":1610848947818,"results":"34","hashOfConfig":"21"},{"size":5037,"mtime":1609911347650,"results":"35","hashOfConfig":"21"},{"size":5123,"mtime":1610848726936,"results":"36","hashOfConfig":"21"},{"size":444,"mtime":1609897098913,"results":"37","hashOfConfig":"21"},{"size":926,"mtime":1610855798576,"results":"38","hashOfConfig":"21"},{"size":2134,"mtime":1610080063918,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1yn7nuk",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"43"},"/Users/mac/Desktop/board-game/frontend/src/index.js",["85"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport {ApolloProvider, Query} from 'react-apollo';\nimport ApolloClient, { createOperation, gql } from 'apollo-boost';\nimport Root from \"./Root\";\nimport Auth from './components/Auth';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:8000/graphql/',\n    fetchOptions: {\n        credentials: \"include\"\n    },\n    request: operation => {\n        const token = localStorage.getItem('authToken') || \"\"\n        operation.setContext({\n            headers: {\n                Authorization: `JWT ${token}`\n            }\n        })\n    },\n    clientState: {\n        defaults: {\n            isLoggedIn: !!localStorage.getItem('authToken')\n        }\n    }\n})\n\nconst IS_LOGGED_IN_QUERY = gql`\n    query {\n        isLoggedIn @client\n    }\n`\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Query query={IS_LOGGED_IN_QUERY}>\n            {({ data }) => data.isLoggedIn ? <Root /> : <Auth />}\n        </Query>\n    </ApolloProvider>\n    , document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["86","87"],"/Users/mac/Desktop/board-game/frontend/src/serviceWorker.js",[],"/Users/mac/Desktop/board-game/frontend/src/Root.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Auth/index.js",[],"/Users/mac/Desktop/board-game/frontend/src/withRoot.js",[],"/Users/mac/Desktop/board-game/frontend/src/pages/Profile.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Shared/Header.js",[],"/Users/mac/Desktop/board-game/frontend/src/pages/App.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Auth/Login.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Auth/Register.js",["88"],"import React, { useState } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Mutation } from 'react-apollo';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { FormHelperText } from '@material-ui/core';\nimport Paper from \"@material-ui/core/Paper\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Gavel from \"@material-ui/icons/Gavel\";\nimport VerifiedUserTwoTone from \"@material-ui/icons/VerifiedUserTwoTone\";\nimport { create } from \"jss\";\nimport Error from \"../Shared/Error\"\n\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />\n}\n\nfunction GetRandomName() {\n  const first = firstNickname[Math.floor(Math.random() * firstNickname.length)]\n  const last = lastNickName[Math.floor(Math.random() * lastNickName.length)]\n  return first+last\n}\n\nconst Register = ({ classes, setNewUser }) => {\n  const [username, setUsername] = useState(\"\")\n  const [nickname, setNickname] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [validatePassword, setValidatePassword] = useState(\"\")\n  const [open, setOpen] = useState(false)\n  const [passwordErr, setPasswordErr] = useState(false)\n  const [usernameExist, setUsernameExist] = useState(false)\n  const [checkUsername, setCheckUsername] = useState(false)\n\n  const handleSubmit = (event, createUser) => {\n    event.preventDefault()\n    createUser()\n  }\n\n  const handleValidateUsername = (event) => {\n    setCheckUsername(true)\n    setUsername(event.target.value)\n  }\n\n  const handleValidatePassword = (event) => {\n\n    if(event.target.id === \"validatePassword\"){\n      setValidatePassword(event.target.value)\n      if (event.target.value !== password && !passwordErr){\n        setPasswordErr(true)\n      }\n      if (event.target.value === password || event.target.value === \"\"){\n        setPasswordErr(false)\n      }\n    }\n    else{ // password\n      setPassword(event.target.value)\n      if (validatePassword !== \"\" && event.target.value !== validatePassword && !passwordErr){\n        setPasswordErr(true)\n      }\n      if (event.target.value === validatePassword){\n        setPasswordErr(false)\n      }\n    }\n  }\n  \n  return (\n  <div className = {classes.root}>\n    <Paper className = {classes.paper}>\n      <Avatar className = {classes.avatar}>\n        <Gavel />\n      </Avatar>  \n      <Typography variant = \"headline\">\n        Register\n      </Typography>\n      <Mutation \n        mutation = {REGISTER_MUTATION} \n        variables={{ username, nickname, password, email }} \n        onCompleted={data => {\n          console.log({ data })\n          setOpen(true)\n        }}\n      >\n        {(createUser, { loading, error }) => {\n          return(\n            <form onSubmit={event => handleSubmit(event, createUser)} className = {classes.form}>\n              <FormControl error={usernameExist} margin = \"normal\" required fullWidth>\n                <InputLabel htmlFor = \"username\">\n                  Username\n                </InputLabel>\n                <Input id = \"username\" onBlur = {event => handleValidateUsername(event)}/>\n                {checkUsername && <Query query={USERNAME_QUERY} variables={{ username: username }}>\n                  {({ data, loading, error }) => {\n                      if (loading) return <div>Loading</div>\n                      if (error) return <div>Error</div>\n                      setCheckUsername(false)\n                      setUsernameExist(data.exist)\n                      return (null)\n                    }}\n                  </Query>} \n                {usernameExist && <FormHelperText error>{\"Username already exist\"}</FormHelperText>}\n              </FormControl>\n              <FormControl margin = \"normal\" required fullWidth>\n                <InputLabel htmlFor = \"email\">\n                  Email\n                </InputLabel>\n                <Input id = \"email\" onChange = {event => setEmail(event.target.value)}/>\n              </FormControl>\n              <FormControl margin = \"normal\" fullWidth>\n                <InputLabel htmlFor = \"nickname\">\n                  Nickname\n                </InputLabel>\n                <Input id = \"nickname\" onChange = {event => setNickname(event.target.value)}/>\n              </FormControl>\n              <FormControl margin = \"normal\" required fullWidth>\n                <InputLabel htmlFor = \"password\">\n                  Password\n                </InputLabel>\n                <Input id = \"password\" type = \"password\" onBlur = {event => handleValidatePassword(event)}/>\n              </FormControl>\n              <FormControl error={passwordErr} margin = \"normal\" required fullWidth>\n                <InputLabel htmlFor = \"validatePassword\">\n                  Confirm Password\n                </InputLabel>\n                <Input id = \"validatePassword\" type = \"password\" onBlur = {event => handleValidatePassword(event)}/>\n                {passwordErr && <FormHelperText error>{\"Password not the same\"}</FormHelperText>}\n              </FormControl>\n              <Button\n                type = \"submit\"\n                fullWidth\n                variant = \"contained\"\n                color = \"secondary\"\n                onClick = {() => {\n                  nickname === \"\" && setNickname(GetRandomName)\n                }}\n                disabled={loading || !username.trim() || !password.trim() || (password !== validatePassword) || usernameExist}\n                className = {classes.submit}>\n                  {loading ? \"Registering...\" : \"Register\"}\n              </Button>\n              <Button\n                onClick={() => setNewUser(false)}\n                color = \"primary\"\n                variant = \"outlined\"\n                fullWidth\n              >\n                Previous user? Log in here\n              </Button>\n              {/* Error Handling */}\n              {error && <Error error={error}/>}\n            </form>\n          )\n        }}\n      </Mutation> \n    </Paper>\n\n      {/* Success Dialog */}\n      < Dialog\n        open={open}\n        disableBackdropClick={true}\n        TransitionComponent={Transition}\n      >\n        <DialogTitle>\n          <VerifiedUserTwoTone className={classes.icon} />\n          New Account\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            User {username} successfully created!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" variant=\"contained\" onClick={() => setNewUser(false)}>\n            Login\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n    );\n};\n\nconst REGISTER_MUTATION = gql`\nmutation ($username: String!, $nickname: String!, $password:String!, $email:String!){\n  createUser(username:$username, nickname:$nickname, password:$password, email:$email){\n    user{\n      username\n      nickname\n\t\t}\n  }\n}\n`\n\nconst USERNAME_QUERY = gql`\nquery ($username: String!){\n  exist(username: $username)\n}\n`\n\nconst styles = theme => ({\n  root: {\n    width: \"auto\",\n    display: \"block\",\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(\"md\")]: {\n      width: 400,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  paper: {\n    marginTop: theme.spacing.unit * 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing.unit * 2\n  },\n  title: {\n    marginTop: theme.spacing.unit * 2,\n    color: theme.palette.openTitle\n  },\n  avatar: {\n    margin: theme.spacing.unit,\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit\n  },\n  submit: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2\n  },\n  icon: {\n    padding: \"0px 2px 2px 0px\",\n    verticalAlign: \"middle\",\n    color: \"green\"\n  }\n});\n\nexport default withStyles(styles)(Register);\n\n\nconst firstNickname = [\n  \"admirer\",\n  \"arm\",\n  \"axe\",\n  \"back\",\n  \"bane\",\n  \"baker\",\n  \"basher\",\n  \"beard\",\n  \"bearer\",\n  \"bender\",\n  \"blade\",\n  \"bleeder\",\n  \"blender\",\n  \"blood\",\n  \"boiler\",\n  \"bone\",\n  \"boot\",\n  \"borer\",\n  \"born\",\n  \"bow\",\n  \"breaker\",\n  \"breeder\",\n  \"bringer\",\n  \"brow\",\n  \"builder\",\n  \"chaser\",\n  \"chiller\",\n  \"collar\",\n  \"counter\",\n  \"curser\",\n  \"dancer\",\n  \"deck\",\n  \"dottir\",\n  \"doubter\",\n  \"dreamer\",\n  \"drinker\",\n  \"drowner\",\n  \"ear\",\n  \"eater\",\n  \"face\",\n  \"fearer\",\n  \"friend\",\n  \"foot\",\n  \"fury\",\n  \"gorer\",\n  \"grim\",\n  \"grinder\",\n  \"grower\",\n  \"growth\",\n  \"hacker\",\n  \"hall\",\n  \"hammer\",\n  \"hand\",\n  \"hands\",\n  \"head\",\n  \"hilt\",\n  \"hugger\",\n  \"hunter\",\n  \"killer\",\n  \"leg\",\n  \"licker\",\n  \"liker\",\n  \"lost\",\n  \"lover\",\n  \"maker\",\n  \"mender\",\n  \"minder\",\n  \"miner\",\n  \"mocker\",\n  \"monger\",\n  \"neck\",\n  \"puncher\",\n  \"rage\",\n  \"rhyme\",\n  \"rider\",\n  \"ringer\",\n  \"roarer\",\n  \"roller\",\n  \"sailor\",\n  \"screamer\",\n  \"sequel\",\n  \"server\",\n  \"shield\",\n  \"shoe\",\n  \"singer\",\n  \"skinner\",\n  \"slinger\",\n  \"slugger\",\n  \"sniffer\",\n  \"son\",\n  \"smasher\",\n  \"speaker\",\n  \"stinker\",\n  \"sucker\",\n  \"sword\",\n  \"tail\",\n  \"tamer\",\n  \"taster\",\n  \"thigh\",\n  \"tongue\",\n  \"tosser\",\n  \"tracker\",\n  \"washer\",\n  \"wielder\",\n  \"wing\",\n  \"wisher\",\n  \"wrath\"\n]\n\nconst lastNickName = [\n  \"Aesir\",\n  \"Axe\",\n  \"Battle\",\n  \"Bear\",\n  \"Berg\",\n  \"Biscuit\",\n  \"Black\",\n  \"Blade\",\n  \"Blood\",\n  \"Blue\",\n  \"Boar\",\n  \"Board\",\n  \"Bone\",\n  \"Cage\",\n  \"Cave\",\n  \"Chain\",\n  \"Cloud\",\n  \"Coffee\",\n  \"Code\",\n  \"Death\",\n  \"Dragon\",\n  \"Dwarf\",\n  \"Eel\",\n  \"Egg\",\n  \"Elk\",\n  \"Fire\",\n  \"Fjord\",\n  \"Flame\",\n  \"Flour\",\n  \"Forge\",\n  \"Fork\",\n  \"Fox\",\n  \"Frost\",\n  \"Furnace\",\n  \"Cheese\",\n  \"Giant\",\n  \"Glacier\",\n  \"Goat\",\n  \"God\",\n  \"Gold\",\n  \"Granite\",\n  \"Griffon\",\n  \"Grim\",\n  \"Haggis\",\n  \"Hall\",\n  \"Hamarr\",\n  \"Helm\",\n  \"Horn\",\n  \"Horse\",\n  \"House\",\n  \"Huskarl\",\n  \"Ice\",\n  \"Iceberg\",\n  \"Icicle\",\n  \"Iron\",\n  \"Jarl\",\n  \"Kelp\",\n  \"Kettle\",\n  \"Kraken\",\n  \"Lake\",\n  \"Light\",\n  \"Long\",\n  \"Mace\",\n  \"Mead\",\n  \"Maelstrom\",\n  \"Mail\",\n  \"Mammoth\",\n  \"Man\",\n  \"Many\",\n  \"Mountain\",\n  \"Mutton\",\n  \"Noun\",\n  \"Oath\",\n  \"One\",\n  \"Owl\",\n  \"Pain\",\n  \"Peak\",\n  \"Pine\",\n  \"Pot\",\n  \"Rabbit\",\n  \"Rat\",\n  \"Raven\",\n  \"Red\",\n  \"Refreshingbeverage\",\n  \"Ring\",\n  \"Rime\",\n  \"Rock\",\n  \"Root\",\n  \"Rune\",\n  \"Salmon\",\n  \"Sap\",\n  \"Sea\",\n  \"Seven\",\n  \"Shield\",\n  \"Ship\",\n  \"Silver\",\n  \"Sky\",\n  \"Slush\",\n  \"Smoke\",\n  \"Snow\",\n  \"Spear\",\n  \"Squid\",\n  \"Steam\",\n  \"Stone\",\n  \"Storm\",\n  \"Swine\",\n  \"Sword\",\n  \"Three\",\n  \"Tongue\",\n  \"Torch\",\n  \"Troll\",\n  \"Two\",\n  \"Ulfsark\",\n  \"Umlaut\",\n  \"Unsightly\",\n  \"Valkyrie\",\n  \"Wave\",\n  \"White\",\n  \"Wolf\",\n  \"Woman\",\n  \"Worm\",\n  \"Wyvern\"\n]","/Users/mac/Desktop/board-game/frontend/src/components/Auth/Signout.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Shared/Error.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Shared/Loading.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Room/RoomList.js",["89"],"import React from \"react\";\nimport { Link } from 'react-router-dom'\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelActions from \"@material-ui/core/ExpansionPanelActions\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport JoinRoom from \"./JoinRoom\";\nimport DeleteRoom from \"./DeleteRoom\";\nimport UpdateRoom from \"./UpdateRoom\";\nimport CreateRoom from \"./CreateRoom\";\n\nconst RoomList = ({ classes, rooms }) => (\n  <List>\n    {rooms.map(room => (\n      <ExpansionPanel key={room.id}>\n        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} >\n          <ListItem className={classes.root}>\n            <JoinRoom />\n            <ListItemText\n              primaryTypographyProps={{\n                variant: \"subheading\",\n                color: \"primary\"\n              }}\n              primary={`${room.name}`}\n              secondary={\n                <Link className={classes.link} to={`/profile/${room.owner.id}`}>\n                  {`Owner: ${room.owner.username}`}\n                </Link>\n              }\n            />\n            <ListItemText\n              primaryTypographyProps={{\n                variant: \"subheading\",\n                color: \"primary\"\n              }}\n              primary={`${room.game}`}\n            />\n          </ListItem>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails className={classes.details}>\n          <Typography variant=\"body1\">\n            {`Room ID: ${room.id}`}\n            <br />\n            {`Capacity: ${room.capacity}`}\n            <br />\n            {`Members: ${room.members}`}\n            <br />\n            {`Url: ${room.url}`}\n          </Typography>\n        </ExpansionPanelDetails>\n        <ExpansionPanelActions>\n          <UpdateRoom room={room} />\n          <DeleteRoom room={room} />\n        </ExpansionPanelActions>\n      </ExpansionPanel>\n    ))}\n  </List>\n)\n\nconst styles = {\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  details: {\n    alignItems: \"center\"\n  },\n  link: {\n    color: \"#424242\",\n    textDecoration: \"none\",\n    \"&:hover\": {\n      color: \"black\"\n    }\n  }\n};\n\nexport default withStyles(styles)(RoomList);\n","/Users/mac/Desktop/board-game/frontend/src/components/Room/CreateRoom.js",["90","91","92","93"],"import React, { useState } from \"react\";\nimport {gql} from \"apollo-boost\";\nimport { Mutation } from \"react-apollo\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Error from \"../Shared/Error\";\nimport Loading from \"../Shared/Loading\";\nimport { GET_ROOMS_QUERY } from \"../../pages/App\";\n\nconst CreateRoom = ({ classes }) => {\n  const [open, setOpen] = useState(false)\n  const [game, setGame] = useState(\"\")\n  const [name, setName] = useState(\"\")\n  const [capacity, setCapacity] = useState(\"\")\n\n  const handleSubmit = (event, createRoom) => {\n    event.preventDefault()\n    const url = \"game.com\"\n    const members = \"\"\n    createRoom({ variables: { capacity, name, game, url, members}})\n  }\n  return (\n    <>\n    {/*Create Room Button*/}\n    <Button onClick={() => setOpen(true)} variant=\"fab\" className={classes.fab} color=\"secondary\">\n      {open ? <ClearIcon/> : <AddIcon />}\n    </Button>\n\n    {/*Create Room Dialog*/}\n    <Mutation \n      mutation={CREATE_ROOM_MUTATION} \n      onCompleted={data => {\n        setOpen(false)\n      }}\n      refetchQueries={() => [{ query: GET_ROOMS_QUERY }]}\n    >\n      {(createRoom, { loading, error }) => {\n        if (loading) return <Loading />\n        if (error) return <Error error={error} />\n        return (\n          <Dialog open={open} className={classes.dialog}>\n            <form onSubmit={event => handleSubmit(event, createRoom)}>\n              <DialogContent>\n                <DialogContentText>\n                  Add a Name & Choose a Game\n                </DialogContentText>\n                <FormControl fullWidth>\n                  <InputLabel id=\"game-select-label\">Game</InputLabel>\n                  <Select\n                    labelId=\"game-select-label\"\n                    id=\"game-select\"\n                    value={game}\n                    onChange={(event) => setGame(event.target.value)}\n                  >\n                    <MenuItem value={\"Game A\"}>Game A</MenuItem>\n                    <MenuItem value={\"Game B\"}>Game B</MenuItem>\n                  </Select>\n                  <TextField \n                    label=\"Room Name\"\n                    placeholder=\"Add Name\"\n                    className={classes.textField}\n                    onChange={event => setName(event.target.value)}\n                  />\n                  <TextField \n                    label=\"Set Capacity\"\n                    placeholder=\"Set number of players\"\n                    className={classes.textField}\n                    onChange={event => setCapacity(event.target.value)}\n                  />\n                </FormControl>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={() => setOpen(false)} className={classes.cancel}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={() => setOpen(false)} \n                  type=\"submit\" \n                  className={classes.save} \n                  disabled={loading || !capacity.trim() || !name.trim() || !game.trim()}\n                >\n                  Add Room\n                </Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n        )\n      }}\n    </Mutation>\n    </>\n  )\n};\n\nconst CREATE_ROOM_MUTATION = gql `\n  mutation ($capacity: String!, $name: String!, $game: String!, $url: String!, $members: String!){\n    createRoom(capacity: $capacity, name: $name, game: $game, url: $url, members: $members) {\n      room {\n        id\n        capacity\n        name\n        url\n        game\n      }\n    }\n  }\n`\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  dialog: {\n    margin: \"0 auto\",\n    maxWidth: 550\n  },\n  textField: {\n    margin: theme.spacing.unit\n  },\n  cancel: {\n    color: \"red\"\n  },\n  save: {\n    color: \"green\"\n  },\n  button: {\n    margin: theme.spacing.unit * 2\n  },\n  icon: {\n    marginLeft: theme.spacing.unit\n  },\n  input: {\n    display: \"none\"\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: theme.spacing.unit * 2,\n    right: theme.spacing.unit * 2,\n    zIndex: \"200\"\n  }\n});\n\nexport default withStyles(styles)(CreateRoom);\n","/Users/mac/Desktop/board-game/frontend/src/components/Room/UpdateRoom.js",["94","95","96","97","98"],"import React, { useState, useContext } from \"react\";\nimport {gql} from \"apollo-boost\";\nimport { Mutation } from \"react-apollo\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\nimport Error from \"../Shared/Error\";\nimport Loading from \"../Shared/Loading\";\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { GET_ROOMS_QUERY } from \"../../pages/App\";\nimport { UserContext } from \"../../Root\";\nconst UpdateRoom = ({ classes, room }) => {\n  const currentUser = useContext(UserContext)\n  const [open, setOpen] = useState(false)\n  const [game, setGame] = useState(room.game)\n  const [name, setName] = useState(room.name)\n  const [capacity, setCapacity] = useState(String(room.capacity))\n  const isCurrentUser = currentUser.id === room.owner.id\n\n  const handleSubmit = (event, updateRoom) => {\n    event.preventDefault()\n    const url = \"game.com\"\n    const members = \"\"\n    updateRoom({ variables: { roomId: room.id, capacity, name, game, url, members}})\n  }\n  return isCurrentUser && (\n    <>\n    {/*Update Room Button*/}\n    <IconButton onClick={() => setOpen(true)}>\n      <EditIcon />\n    </IconButton>\n\n    {/*Create Room Dialog*/}\n    <Mutation \n      mutation={UPDATE_ROOM_MUTATION} \n      onCompleted={data => {\n        setOpen(false)\n      }}\n      // refetchQueries={() => [{ query: GET_ROOMS_QUERY }]}\n    >\n      {(updateRoom, { loading, error }) => {\n        if (loading) return <Loading />\n        if (error) return <Error error={error} />\n        return (\n          <Dialog open={open} className={classes.dialog}>\n            <form onSubmit={event => handleSubmit(event, updateRoom)}>\n              <DialogContent>\n                <DialogContentText>\n                  Add a Name & Choose a Game\n                </DialogContentText>\n                <FormControl fullWidth>\n                  <InputLabel id=\"game-select-label\">Game</InputLabel>\n                  <Select\n                    labelId=\"game-select-label\"\n                    id=\"game-select\"\n                    value={game}\n                    onChange={(event) => setGame(event.target.value)}\n                  >\n                    <MenuItem value={\"Game A\"}>Game A</MenuItem>\n                    <MenuItem value={\"Game B\"}>Game B</MenuItem>\n                  </Select>\n                  <TextField \n                    label=\"Room Name\"\n                    placeholder={name}\n                    className={classes.textField}\n                    onChange={event => setName(event.target.value)}\n                  />\n                  <TextField \n                    label=\"Set Capacity\"\n                    placeholder={capacity}\n                    className={classes.textField}\n                    onChange={event => setCapacity(event.target.value)}\n                  />\n                </FormControl>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={() => setOpen(false)} className={classes.cancel}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={() => setOpen(false)} \n                  type=\"submit\" \n                  className={classes.save} \n                  disabled={loading || !capacity.trim() || !name.trim() || !game.trim()}\n                >\n                  Update Room\n                </Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n        )\n      }}\n    </Mutation>\n    </>\n  )\n};\n\nconst UPDATE_ROOM_MUTATION = gql`\n  mutation($roomId: Int!, $game: String, $name: String, $url: String, $capacity: String) {\n    updateRoom(id: $roomId, name: $name, game: $game, url: $url, capacity:$capacity) {\n      room {\n        id\n        url\n        capacity\n        members\n        name\n        game\n        owner {\n          id\n          username\n        }\n      }\n    }\n  }\n`\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  dialog: {\n    margin: \"0 auto\",\n    maxWidth: 550\n  },\n  textField: {\n    margin: theme.spacing.unit\n  },\n  cancel: {\n    color: \"red\"\n  },\n  save: {\n    color: \"green\"\n  },\n  button: {\n    margin: theme.spacing.unit * 2\n  },\n  icon: {\n    marginLeft: theme.spacing.unit\n  },\n  input: {\n    display: \"none\"\n  }\n});\n\nexport default withStyles(styles)(UpdateRoom);\n","/Users/mac/Desktop/board-game/frontend/src/components/Room/JoinRoom.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Room/DeleteRoom.js",[],"/Users/mac/Desktop/board-game/frontend/src/components/Room/SearchRooms.js",["99"],"import React, { useState, useRef } from \"react\";\nimport { ApolloConsumer } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Icon } from \"@material-ui/core\";\n\nconst SearchRooms = ({ classes, setSearchResults }) => {\n  const [search, setSearch] = useState(\"\")\n  const inputEl = useRef()\n\n  const clearSearchInput = () => {\n    setSearchResults([])\n    setSearch(\"\")\n    inputEl.current.focus()\n  }\n\n  const handleSubmit = async (event, client) => {\n    event.preventDefault()\n    const res = await client.query({\n      query: SEARCH_ROOMS_QUERY,\n      variables: { search }\n    })\n    setSearchResults(res.data.rooms)\n  }\n  return (\n    <ApolloConsumer >\n      {client => (\n        <form onSubmit={event => handleSubmit(event, client)}>\n          <Paper className={classes.root} elevation={1}>\n            <IconButton onClick={clearSearchInput}>\n              <ClearIcon />\n            </IconButton>\n            <TextField\n              fullWidth\n              placeholder=\"Search All Rooms\"\n              InputProps={{\n                disableUnderline: true\n              }}\n              onChange={event => setSearch(event.target.value)}\n              value={search}\n              inputRef={inputEl}\n            />\n            <IconButton type=\"submit\">\n              <SearchIcon />\n            </IconButton>\n          </Paper>\n        </form>\n      )}\n    </ApolloConsumer>\n  )\n};\n\nconst SEARCH_ROOMS_QUERY = gql`\n  query($search: String) {\n    rooms(search: $search) {\n      id\n      url\n      capacity\n      members\n      name\n      game\n      owner {\n        id\n        username\n      }\n    }\n  }\n`\n\nconst styles = theme => ({\n  root: {\n    padding: \"2px 4px\",\n    margin: theme.spacing.unit,\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n});\n\nexport default withStyles(styles)(SearchRooms);\n",{"ruleId":"100","severity":1,"message":"101","line":6,"column":24,"nodeType":"102","messageId":"103","endLine":6,"endColumn":39},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"100","severity":1,"message":"108","line":22,"column":10,"nodeType":"102","messageId":"103","endLine":22,"endColumn":16},{"ruleId":"100","severity":1,"message":"109","line":16,"column":8,"nodeType":"102","messageId":"103","endLine":16,"endColumn":18},{"ruleId":"100","severity":1,"message":"110","line":9,"column":8,"nodeType":"102","messageId":"103","endLine":9,"endColumn":19},{"ruleId":"100","severity":1,"message":"111","line":11,"column":8,"nodeType":"102","messageId":"103","endLine":11,"endColumn":22},{"ruleId":"100","severity":1,"message":"112","line":14,"column":8,"nodeType":"102","messageId":"103","endLine":14,"endColumn":24},{"ruleId":"100","severity":1,"message":"113","line":17,"column":8,"nodeType":"102","messageId":"103","endLine":17,"endColumn":24},{"ruleId":"100","severity":1,"message":"111","line":14,"column":8,"nodeType":"102","messageId":"103","endLine":14,"endColumn":22},{"ruleId":"100","severity":1,"message":"110","line":15,"column":8,"nodeType":"102","messageId":"103","endLine":15,"endColumn":19},{"ruleId":"100","severity":1,"message":"112","line":16,"column":8,"nodeType":"102","messageId":"103","endLine":16,"endColumn":24},{"ruleId":"100","severity":1,"message":"113","line":17,"column":8,"nodeType":"102","messageId":"103","endLine":17,"endColumn":24},{"ruleId":"100","severity":1,"message":"114","line":23,"column":10,"nodeType":"102","messageId":"103","endLine":23,"endColumn":25},{"ruleId":"100","severity":1,"message":"115","line":10,"column":10,"nodeType":"102","messageId":"103","endLine":10,"endColumn":14},"no-unused-vars","'createOperation' is defined but never used.","Identifier","unusedVar","no-native-reassign",["116"],"no-negated-in-lhs",["117"],"'create' is defined but never used.","'CreateRoom' is defined but never used.","'DialogTitle' is defined but never used.","'FormHelperText' is defined but never used.","'CircularProgress' is defined but never used.","'LibraryMusicIcon' is defined but never used.","'GET_ROOMS_QUERY' is defined but never used.","'Icon' is defined but never used.","no-global-assign","no-unsafe-negation"]