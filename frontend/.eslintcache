[{"/Users/zhenxu/Desktop/board-game/frontend/src/index.js":"1","/Users/zhenxu/Desktop/board-game/frontend/src/Root.js":"2","/Users/zhenxu/Desktop/board-game/frontend/src/serviceWorker.js":"3","/Users/zhenxu/Desktop/board-game/frontend/src/withRoot.js":"4","/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/index.js":"5","/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/Login.js":"6","/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/Register.js":"7","/Users/zhenxu/Desktop/board-game/frontend/src/components/Shared/Error.js":"8","/Users/zhenxu/Desktop/board-game/frontend/src/components/Shared/Header.js":"9","/Users/zhenxu/Desktop/board-game/frontend/src/pages/Profile.js":"10","/Users/zhenxu/Desktop/board-game/frontend/src/pages/App.js":"11","/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/Signout.js":"12"},{"size":1329,"mtime":1609725283504,"results":"13","hashOfConfig":"14"},{"size":1399,"mtime":1609726603886,"results":"15","hashOfConfig":"14"},{"size":4948,"mtime":1608857125045,"results":"16","hashOfConfig":"14"},{"size":1163,"mtime":1608857125045,"results":"17","hashOfConfig":"14"},{"size":340,"mtime":1609725283503,"results":"18","hashOfConfig":"14"},{"size":4055,"mtime":1609725283503,"results":"19","hashOfConfig":"14"},{"size":8876,"mtime":1609726603886,"results":"20","hashOfConfig":"14"},{"size":665,"mtime":1609725283504,"results":"21","hashOfConfig":"14"},{"size":1743,"mtime":1609726603889,"results":"22","hashOfConfig":"14"},{"size":1477,"mtime":1608857125044,"results":"23","hashOfConfig":"14"},{"size":318,"mtime":1608857125044,"results":"24","hashOfConfig":"14"},{"size":1025,"mtime":1609726603888,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"2v2ize",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/zhenxu/Desktop/board-game/frontend/src/index.js",["52"],"/Users/zhenxu/Desktop/board-game/frontend/src/Root.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/serviceWorker.js",[],["53","54"],"/Users/zhenxu/Desktop/board-game/frontend/src/withRoot.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/index.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/Login.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/Register.js",["55"],"import React, { useState } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Mutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Gavel from \"@material-ui/icons/Gavel\";\nimport VerifiedUserTwoTone from \"@material-ui/icons/VerifiedUserTwoTone\";\nimport { create } from \"jss\";\nimport Error from \"../Shared/Error\"\n\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />\n}\n\nfunction GetRandomName() {\n  const first = firstNickname[Math.floor(Math.random() * firstNickname.length)]\n  const last = lastNickName[Math.floor(Math.random() * lastNickName.length)]\n  return first+last\n}\n\nconst Register = ({ classes, setNewUser }) => {\n  const [username, setUsername] = useState(\"\")\n  const [nickname, setNickname] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [open, setOpen] = useState(false)\n\n  const handleSubmit = (event, createUser) => {\n    event.preventDefault()\n    createUser()\n  }\n  \n  return (\n  <div className = {classes.root}>\n    <Paper className = {classes.paper}>\n      <Avatar className = {classes.avatar}>\n        <Gavel />\n      </Avatar>  \n      <Typography variant = \"headline\">\n        Register\n      </Typography>\n      <Mutation \n        mutation = {REGISTER_MUTATION} \n        variables={{ username, nickname, password }} \n        onCompleted={data => {\n          console.log({ data })\n          setOpen(true)\n        }}\n      >\n        {(createUser, { loading, error }) => {\n          return(\n            <form onSubmit={event => handleSubmit(event, createUser)} className = {classes.form}>\n              <FormControl margin = \"normal\" required fullWidth>\n                <InputLabel htmlFor = \"username\">\n                  Username\n                </InputLabel>\n                <Input id = \"username\" onChange = {event => setUsername(event.target.value)}/>\n              </FormControl>\n              <FormControl margin = \"normal\" fullWidth>\n                <InputLabel htmlFor = \"nickname\">\n                  Nickname\n                </InputLabel>\n                <Input id = \"nickname\" onChange = {event => setNickname(event.target.value)}/>\n              </FormControl>\n              <FormControl margin = \"normal\" required fullWidth>\n                <InputLabel htmlFor = \"password\">\n                  Password\n                </InputLabel>\n                <Input id = \"password\" type = \"password\" onChange = {event => setPassword(event.target.value)}/>\n              </FormControl>\n              <Button\n                type = \"submit\"\n                fullWidth\n                variant = \"contained\"\n                color = \"secondary\"\n                onClick = {() => {\n                  nickname === \"\" && setNickname(GetRandomName)\n                }}\n                disabled={loading || !username.trim() || !password.trim()}\n                className = {classes.submit}>\n                  {loading ? \"Registering...\" : \"Register\"}\n              </Button>\n              <Button\n                onClick={() => setNewUser(false)}\n                color = \"primary\"\n                variant = \"outlined\"\n                fullWidth\n              >\n                Previous user? Log in here\n              </Button>\n              {/* Error Handling */}\n              {error && <Error error={error}/>}\n            </form>\n          )\n        }}\n      </Mutation> \n    </Paper>\n\n      {/* Success Dialog */}\n      < Dialog\n        open={open}\n        disableBackdropClick={true}\n        TransitionComponent={Transition}\n      >\n        <DialogTitle>\n          <VerifiedUserTwoTone className={classes.icon} />\n          New Account\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            User {username} successfully created!\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" variant=\"contained\" onClick={() => setNewUser(false)}>\n            Login\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n    );\n};\n\nconst REGISTER_MUTATION = gql`\nmutation ($username: String!, $nickname: String!, $password:String!){\n  createUser(username:$username, nickname:$nickname, password:$password){\n    user{\n      username\n      nickname\n\t\t}\n  }\n}\n`\n\nconst styles = theme => ({\n  root: {\n    width: \"auto\",\n    display: \"block\",\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(\"md\")]: {\n      width: 400,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  paper: {\n    marginTop: theme.spacing.unit * 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: theme.spacing.unit * 2\n  },\n  title: {\n    marginTop: theme.spacing.unit * 2,\n    color: theme.palette.openTitle\n  },\n  avatar: {\n    margin: theme.spacing.unit,\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing.unit\n  },\n  submit: {\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2\n  },\n  icon: {\n    padding: \"0px 2px 2px 0px\",\n    verticalAlign: \"middle\",\n    color: \"green\"\n  }\n});\n\nexport default withStyles(styles)(Register);\n\n\nconst firstNickname = [\n  \"admirer\",\n  \"arm\",\n  \"axe\",\n  \"back\",\n  \"bane\",\n  \"baker\",\n  \"basher\",\n  \"beard\",\n  \"bearer\",\n  \"bender\",\n  \"blade\",\n  \"bleeder\",\n  \"blender\",\n  \"blood\",\n  \"boiler\",\n  \"bone\",\n  \"boot\",\n  \"borer\",\n  \"born\",\n  \"bow\",\n  \"breaker\",\n  \"breeder\",\n  \"bringer\",\n  \"brow\",\n  \"builder\",\n  \"chaser\",\n  \"chiller\",\n  \"collar\",\n  \"counter\",\n  \"curser\",\n  \"dancer\",\n  \"deck\",\n  \"dottir\",\n  \"doubter\",\n  \"dreamer\",\n  \"drinker\",\n  \"drowner\",\n  \"ear\",\n  \"eater\",\n  \"face\",\n  \"fearer\",\n  \"friend\",\n  \"foot\",\n  \"fury\",\n  \"gorer\",\n  \"grim\",\n  \"grinder\",\n  \"grower\",\n  \"growth\",\n  \"hacker\",\n  \"hall\",\n  \"hammer\",\n  \"hand\",\n  \"hands\",\n  \"head\",\n  \"hilt\",\n  \"hugger\",\n  \"hunter\",\n  \"killer\",\n  \"leg\",\n  \"licker\",\n  \"liker\",\n  \"lost\",\n  \"lover\",\n  \"maker\",\n  \"mender\",\n  \"minder\",\n  \"miner\",\n  \"mocker\",\n  \"monger\",\n  \"neck\",\n  \"puncher\",\n  \"rage\",\n  \"rhyme\",\n  \"rider\",\n  \"ringer\",\n  \"roarer\",\n  \"roller\",\n  \"sailor\",\n  \"screamer\",\n  \"sequel\",\n  \"server\",\n  \"shield\",\n  \"shoe\",\n  \"singer\",\n  \"skinner\",\n  \"slinger\",\n  \"slugger\",\n  \"sniffer\",\n  \"son\",\n  \"smasher\",\n  \"speaker\",\n  \"stinker\",\n  \"sucker\",\n  \"sword\",\n  \"tail\",\n  \"tamer\",\n  \"taster\",\n  \"thigh\",\n  \"tongue\",\n  \"tosser\",\n  \"tracker\",\n  \"washer\",\n  \"wielder\",\n  \"wing\",\n  \"wisher\",\n  \"wrath\"\n]\n\nconst lastNickName = [\n  \"Aesir\",\n  \"Axe\",\n  \"Battle\",\n  \"Bear\",\n  \"Berg\",\n  \"Biscuit\",\n  \"Black\",\n  \"Blade\",\n  \"Blood\",\n  \"Blue\",\n  \"Boar\",\n  \"Board\",\n  \"Bone\",\n  \"Cage\",\n  \"Cave\",\n  \"Chain\",\n  \"Cloud\",\n  \"Coffee\",\n  \"Code\",\n  \"Death\",\n  \"Dragon\",\n  \"Dwarf\",\n  \"Eel\",\n  \"Egg\",\n  \"Elk\",\n  \"Fire\",\n  \"Fjord\",\n  \"Flame\",\n  \"Flour\",\n  \"Forge\",\n  \"Fork\",\n  \"Fox\",\n  \"Frost\",\n  \"Furnace\",\n  \"Cheese\",\n  \"Giant\",\n  \"Glacier\",\n  \"Goat\",\n  \"God\",\n  \"Gold\",\n  \"Granite\",\n  \"Griffon\",\n  \"Grim\",\n  \"Haggis\",\n  \"Hall\",\n  \"Hamarr\",\n  \"Helm\",\n  \"Horn\",\n  \"Horse\",\n  \"House\",\n  \"Huskarl\",\n  \"Ice\",\n  \"Iceberg\",\n  \"Icicle\",\n  \"Iron\",\n  \"Jarl\",\n  \"Kelp\",\n  \"Kettle\",\n  \"Kraken\",\n  \"Lake\",\n  \"Light\",\n  \"Long\",\n  \"Mace\",\n  \"Mead\",\n  \"Maelstrom\",\n  \"Mail\",\n  \"Mammoth\",\n  \"Man\",\n  \"Many\",\n  \"Mountain\",\n  \"Mutton\",\n  \"Noun\",\n  \"Oath\",\n  \"One\",\n  \"Owl\",\n  \"Pain\",\n  \"Peak\",\n  \"Pine\",\n  \"Pot\",\n  \"Rabbit\",\n  \"Rat\",\n  \"Raven\",\n  \"Red\",\n  \"Refreshingbeverage\",\n  \"Ring\",\n  \"Rime\",\n  \"Rock\",\n  \"Root\",\n  \"Rune\",\n  \"Salmon\",\n  \"Sap\",\n  \"Sea\",\n  \"Seven\",\n  \"Shield\",\n  \"Ship\",\n  \"Silver\",\n  \"Sky\",\n  \"Slush\",\n  \"Smoke\",\n  \"Snow\",\n  \"Spear\",\n  \"Squid\",\n  \"Steam\",\n  \"Stone\",\n  \"Storm\",\n  \"Swine\",\n  \"Sword\",\n  \"Three\",\n  \"Tongue\",\n  \"Torch\",\n  \"Troll\",\n  \"Two\",\n  \"Ulfsark\",\n  \"Umlaut\",\n  \"Unsightly\",\n  \"Valkyrie\",\n  \"Wave\",\n  \"White\",\n  \"Wolf\",\n  \"Woman\",\n  \"Worm\",\n  \"Wyvern\"\n]","/Users/zhenxu/Desktop/board-game/frontend/src/components/Shared/Error.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/components/Shared/Header.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/pages/Profile.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/pages/App.js",[],"/Users/zhenxu/Desktop/board-game/frontend/src/components/Auth/Signout.js",[],{"ruleId":"56","severity":1,"message":"57","line":6,"column":24,"nodeType":"58","messageId":"59","endLine":6,"endColumn":39},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"56","severity":1,"message":"64","line":20,"column":10,"nodeType":"58","messageId":"59","endLine":20,"endColumn":16},"no-unused-vars","'createOperation' is defined but never used.","Identifier","unusedVar","no-native-reassign",["65"],"no-negated-in-lhs",["66"],"'create' is defined but never used.","no-global-assign","no-unsafe-negation"]